x = [...
  -1.938854,...
  -1.778274,...
  -1.677912,...
  -1.517332,...
  -1.396897,...
  -1.176099,...
  -1.055664,...
  -0.975374,...
  -0.875012,...
  -0.854939,...
  -0.834867,...
  -0.854939,...
  -0.935229,...
  -1.075737,...
  -1.176099,...
  -1.216244,...
  -1.216244,...
  -1.276462,...
  -1.276462,...
  -1.156027,...
  -0.915157,...
  -0.614069,...
  -0.312982,...
  -0.112257,...
   0.068396,...
   0.289194,...
   0.610354,...
   0.750861,...
   0.811079,...
   1.051949,...
   1.212529,...
   1.513616,...
   1.854849,...
   2.115792,...
   2.236227,...
   2.396807,...
   2.778184,...
   2.958837,...
   3.159562,...
   3.460649,...
   3.681447,...
   4.002607,...
   4.183260,...
   4.363912,...
   4.544565,...
   4.705145,...
   4.805507,...
   4.925942,...
   5.006232,...
   5.166812,...
   5.247102,...
   5.327392,...
   5.407682,...
   5.407682,...
   5.407682,...
   5.287247,...
   5.086522,...
   4.986160,...
   4.865725,...
   4.865725,...
   4.885797,...
   4.966087,...
   5.006232,...
   5.186885,...
   5.287247,...
   5.347465,...
   5.367537,...
   5.367537,...
   5.407682,...
   5.407682,...
   5.407682,...
   5.407682,...
   5.387610,...
   5.387610,...
   5.367537,...
   5.227030,...
   5.146740,...
   4.966087,...
   4.905870,...
   4.825580,...
   4.685072,...
   4.584710,...
   4.363912,...
   4.363912,...
   4.303695,...
   4.203332,...
   4.123042,...
   3.862099,...
   3.761737,...
   3.761737,...
   3.500794,...
   3.420504,...
   3.420504,...
   3.019054,...
   2.838402,...
   2.537314,...
   2.336589,...
   2.296444,...
   2.236227,...
   2.135864,...
   2.135864,...
   2.135864,...
   2.236227,...
   2.316517,...
   2.457024,...
   2.798257,...
   2.878547,...
   2.918692,...
   2.878547,...
   2.818329,...
   2.818329,...
   2.958837,...
   3.039127,...
   3.079272,...
   3.360287,...
   3.520867,...
   3.601157,...
   3.761737,...
   3.821954,...
   3.942389,...
   4.002607];

y = [...
    6.5059,...
    6.5661,...
    6.6263,...
    6.6665,...
    6.7467,...
    6.8471,...
    6.9274,...
    7.0278,...
    7.3088,...
    7.4694,...
    7.6902,...
    7.8507,...
    7.9712,...
    8.0916,...
    8.1719,...
    8.3124,...
    8.3124,...
    8.6336,...
    8.6938,...
    8.8544,...
    9.0350,...
    9.1153,...
    9.1554,...
    9.1554,...
    9.0551,...
    8.8544,...
    8.6938,...
    8.4931,...
    8.4128,...
    8.2723,...
    8.1719,...
    8.0715,...
    8.0515,...
    8.0515,...
    8.0515,...
    8.0515,...
    8.0515,...
    8.0515,...
    8.0515,...
    8.0515,...
    8.0515,...
    8.0515,...
    8.0715,...
    8.0715,...
    8.0916,...
    8.1518,...
    8.2120,...
    8.2522,...
    8.3124,...
    8.3726,...
    8.4128,...
    8.4730,...
    8.6336,...
    8.8142,...
    8.8544,...
    9.1153,...
    9.2157,...
    9.2558,...
    9.3762,...
    9.4565,...
    9.6573,...
    9.8178,...
    9.8781,...
   10.1189,...
   10.2594,...
   10.3799,...
   10.6207,...
   10.8014,...
   11.0222,...
   11.2229,...
   11.3835,...
   11.7247,...
   12.0860,...
   12.0860,...
   12.2667,...
   12.6079,...
   12.8889,...
   13.1097,...
   13.2502,...
   13.5915,...
   13.8323,...
   14.0732,...
   14.4345,...
   14.4345,...
   14.6754,...
   14.9163,...
   15.0568,...
   15.2575,...
   15.3579,...
   15.3579,...
   15.3579,...
   15.3579,...
   15.3579,...
   15.2776,...
   15.2374,...
   15.0367,...
   14.8761,...
   14.8159,...
   14.5951,...
   14.3944,...
   14.2137,...
   14.0531,...
   13.8524,...
   13.7922,...
   13.7521,...
   13.5714,...
   13.5513,...
   13.2502,...
   13.0294,...
   12.8488,...
   12.7484,...
   12.4875,...
   12.4072,...
   12.3470,...
   12.0660,...
   11.9455,...
   11.8452,...
   11.6444,...
   11.3835,...
   11.1226,...
   11.0824];

   % The trajectory
   path = [x;y];

   % Get the orientations
   diff_x = gradient(path(1,:));
   diff_y = gradient(path(2,:));

   t = atan2(diff_y,diff_x);

   for i=1:size(t,2)
     if abs(t(i)) == pi/2
       t(i) = t(i)- pi/20;
  end
end

t(end+1) = t(end);
t = t(2:end);

trj = [path; t];

% Paste the following into
% /media/li9i/elements/PhD/fourier_scan_matcher/struct/odom_test/src/s2msm.cpp:getRealTrajectory

%printf('std::vector< std::tuple<double,double,double> > virtual_poses;\n');
%printf('std::vector< std::tuple<double,double,double> > real_poses;\n');
%printf('std::tuple<double,double,double> virtual_pose;\n');
%printf('std::tuple<double,double,double> real_pose;\n');

%for i=1:size(trj,2)-1
%printf('//-------------------------------------------------\n')
%printf('// Pose no. %d/%d\n', i, size(trj,2)-1);
%printf('std::get<0>(virtual_pose) = %f;\n', trj(1,i));
%printf('std::get<1>(virtual_pose) = %f;\n', trj(2,i));
%printf('std::get<2>(virtual_pose) = %f;\n', trj(3,i));
%printf('std::get<0>(real_pose) = %f;\n', trj(1,i+1));
%printf('std::get<1>(real_pose) = %f;\n', trj(2,i+1));
%printf('std::get<2>(real_pose) = %f;\n', trj(3,i+1));
%printf('virtual_poses->push_back(virtual_pose);\n');
%printf('real_poses->push_back(real_pose);\n');
%end
