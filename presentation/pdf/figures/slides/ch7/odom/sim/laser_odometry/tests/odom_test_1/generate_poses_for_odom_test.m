x = [...
  -1.79758,...
  -1.50866,...
  -1.45088,...
  -1.21975,...
  -0.93084,...
  -0.81527,...
  -0.81527,...
  -0.81527,...
  -0.67081,...
  -0.58414,...
  -0.29523,...
  -0.26633,...
   0.31149,...
   0.45595,...
   0.57151,...
   0.68708,...
   0.77375,...
   0.86043,...
   1.26491,...
   1.69828,...
   2.04497,...
   2.13165,...
   2.36278,...
   2.70947,...
   2.79615,...
   3.20063,...
   3.37397,...
   3.63400,...
   3.86513,...
   4.09626,...
   4.52963,...
   4.73187,...
   4.73187,...
   4.84743,...
   4.90522,...
   4.90522,...
   4.90522,...
   4.90522,...
   4.96300,...
   5.28080,...
   5.48304,...
   5.51193,...
   5.51193,...
   5.51193,...
   5.51193,...
   5.51193,...
   5.51193,...
   5.30969,...
   5.22302,...
   4.99189,...
   4.76076,...
   4.76076,...
   4.81854,...
   4.50074,...
   4.21182,...
   4.21182,...
   4.21182,...
   4.26961,...
   4.21182,...
   3.98069,...
   3.69178,...
   3.31619,...
   2.91171,...
   2.76726,...
   2.59391,...
   2.59391,...
   2.53613,...
   2.59391,...
   2.96950,...
   3.11395,...
   3.40287,...
   3.77845,...
   4.29850,...
   4.41406,...
   4.41406];

y = [...
    6.5719,...
    6.6297,...
    6.7164,...
    6.9764,...
    7.1786,...
    7.4098,...
    7.8142,...
    7.8720,...
    8.2765,...
    8.3632,...
    8.6521,...
    8.6521,...
    8.4787,...
    8.3632,...
    8.1320,...
    7.8720,...
    7.7565,...
    7.6987,...
    7.6120,...
    7.6120,...
    7.7276,...
    7.7565,...
    7.7565,...
    7.8720,...
    7.9298,...
    7.9298,...
    7.9009,...
    7.7854,...
    7.7854,...
    7.8720,...
    7.9587,...
    8.0743,...
    8.1032,...
    8.2187,...
    8.3921,...
    8.4499,...
    8.7677,...
    8.7677,...
    8.9988,...
    9.2299,...
    9.5766,...
    9.8655,...
   10.2122,...
   10.5300,...
   10.8767,...
   11.1079,...
   11.1079,...
   11.5412,...
   11.8590,...
   12.0324,...
   12.2346,...
   12.6680,...
   13.3325,...
   13.5058,...
   13.6214,...
   13.7370,...
   14.3148,...
   14.7482,...
   14.9504,...
   15.0949,...
   15.1815,...
   15.1815,...
   15.0082,...
   14.8637,...
   14.4304,...
   14.1126,...
   13.7370,...
   13.4481,...
   12.9280,...
   12.5524,...
   12.2924,...
   12.0324,...
   11.8301,...
   11.2812,...
   10.7323];

% The trajectory
path = [x;y];

% Get the orientations
diff_x = gradient(path(1,:));
diff_y = gradient(path(2,:));

t = atan2(diff_y,diff_x);

for i=1:size(t,2)
  if abs(t(i)) == pi/2
    t(i) = t(i)- pi/20;
  end
end

t(end+1) = t(end);
t = t(2:end);

trj = [path; t];

% Paste the following into
% /media/li9i/elements/PhD/fourier_scan_matcher/struct/odom_test/src/s2msm.cpp:getRealTrajectory

%printf('std::vector< std::tuple<double,double,double> > virtual_poses;\n');
%printf('std::vector< std::tuple<double,double,double> > real_poses;\n');
%printf('std::tuple<double,double,double> virtual_pose;\n');
%printf('std::tuple<double,double,double> real_pose;\n');

%for i=1:size(trj,2)-1
  %printf('//-------------------------------------------------\n')
  %printf('// Pose no. %d/%d\n', i, size(trj,2)-1);
  %printf('std::get<0>(virtual_pose) = %f;\n', trj(1,i));
  %printf('std::get<1>(virtual_pose) = %f;\n', trj(2,i));
  %printf('std::get<2>(virtual_pose) = %f;\n', trj(3,i));
  %printf('std::get<0>(real_pose) = %f;\n', trj(1,i+1));
  %printf('std::get<1>(real_pose) = %f;\n', trj(2,i+1));
  %printf('std::get<2>(real_pose) = %f;\n', trj(3,i+1));
  %printf('virtual_poses->push_back(virtual_pose);\n');
  %printf('real_poses->push_back(real_pose);\n');
%end
